import org.apache.spark.mllib.evaluation.MulticlassMetrics
import org.apache.spark.mllib.classification.{LogisticRegressionWithLBFGS, LogisticRegressionModel}
import org.apache.spark.mllib.regression.LabeledPoint
import org.apache.spark.mllib.linalg.{Vector, Vectors}


def getDoubleValue(input: String) : Double = {
	var result:Double = 0.0
	if (input == "P") result = 3.0
	if (input == "A") result = 2.0
	if (input == "N") result = 1.0
	if (input == "NB") result = 1.0
	if (input == "B") result = 0.0
	return result
	}
	
val data = sc.textFile("file:///home/ubuntu/sparkfile/b.txt")
data.count()

val parsedData = data.map{line => 
val parts = line.split(",")
LabeledPoint(getDoubleValue(parts(6)), Vectors.dense(parts.slice(0,6).map(x => getDoubleValue(x))))}

println(parsedData.take(10).mkString("\n"))

val splits = parsedData.randomSplit(Array(0.6,0.4), seed=11L)
val trainingData = splits(0)
val testData = splits(1)

val model = new LogisticRegressionWithLBFGS().setNumClasses(2).run(trainingData)


val labelAndPreds = testData.map{ point=>
val prediction = model.predict(point.features)
(point.label, prediction)}

